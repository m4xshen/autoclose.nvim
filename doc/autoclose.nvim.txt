*autoclose.nvim.txt*         For NVIM v0.8.0         Last change: 2025 July 08

==============================================================================
Table of Contents                           *autoclose.nvim-table-of-contents*

  - ⚡ Requirements                         |autoclose.nvim-⚡-requirements|
  - 📦 Installation                       |autoclose.nvim-📦-installation|
  - 🔧 Configuration                     |autoclose.nvim-🔧-configuration|
  - ⭐ Star History                         |autoclose.nvim-⭐-star-history|
1. Links                                                |autoclose.nvim-links|

⚡ REQUIREMENTS                             *autoclose.nvim-⚡-requirements*

- Neovim >= v0.7.0 <https://github.com/neovim/neovim/releases/tag/v0.7.0>


📦 INSTALLATION                           *autoclose.nvim-📦-installation*

1. Install via your favorite package manager.

- vim-plug <https://github.com/junegunn/vim-plug>

>viml
    Plug 'm4xshen/autoclose.nvim'
<

- packer.nvim <https://github.com/wbthomason/packer.nvim>

>lua
    use 'm4xshen/autoclose.nvim'
<

1. Setup the plugin in your `init.lua`.

>lua
    require("autoclose").setup()
<


🔧 CONFIGURATION                         *autoclose.nvim-🔧-configuration*

You can pass your config table into the `setup()` function.


KEYS ~

The available options in `keys`:

- `close`: If set to true, pressing the character will insert both the opening and closing characters, and place the cursor in between them.
- `escape`: If set to true, pressing the character again will escape it instead of inserting a closing character.
- `pair`: The string that represents the pair of opening and closing characters. This should be a two-character string, with the opening character first and the closing character second.
- `disabled_filetypes`: Table of filetypes where the specific key should not be autoclosed.
- `enabled_filetypes`: Only autoclose the key under these filetypes. This option takes precedence over `disabled_filetypes`.
- `disable_command_mode`: If set to true, the character will be disabled in command-line mode.

Example: Add a `$$` pair.

>lua
    require("autoclose").setup({
       keys = {
          ["$"] = { escape = true, close = true, pair = "$$", disabled_filetypes = {} },
       },
    })
<

You can also overwrite the default config.

Example: Remove the escape function of `>`.

>lua
    require("autoclose").setup({
       keys = {
          [">"] = { escape = false, close = false, pair = "<>", disabled_filetypes = {} },
       },
    })
<


OPTIONS ~

The available options in `options`:

- `disabled_filetypes`: The plugin will be disabled under the filetypes in this table.
    - type of the value: table of strings
    - default value: `{ "text" }`

Example: Disable the plugin in text and markdown file.

>lua
    require("autoclose").setup({
       options = {
          disabled_filetypes = { "text", "markdown" },
       },
    })
<

- `disable_when_touch`: Set this to true will disable the auto-close function when the cursor touches character that matches `touch_regex`.
    - type of the value: boolean
    - default value: `false`
- `touch_regex`
    - type of the value: string
    - default value: `"[%w(%[{]"` (alphanumeric characters or `(` or `[` or `{`)

Example:

Your current file: ( `^` points to your cursor position)

>text
    word
    ^
<

You press `(` and the file will become

>
    (word
    ^
<

It doesn’t autoclose for you because your cursor touches `w`.

- `pair_spaces`: Pair the spaces when cursor is inside a pair of `keys`.
    - type of the value: boolean
    - default value: `false`

Example:

The `|` is your cursor in insert mode.

>javascript
    import {|}
<

after inserting a space:

>javascript
    import { | }
<

- `auto_indent`: Enable auto-indent feature
    - type of the value: boolean
    - default value: `true`
- `disable_command_mode`: Disable autoclose for command mode globally
    - type of the value: boolean
    - default value: `false`


DEFAULT CONFIG ~

>lua
    local config = {
       keys = {
          ["("] = { escape = false, close = true, pair = "()" },
          ["["] = { escape = false, close = true, pair = "[]" },
          ["{"] = { escape = false, close = true, pair = "{}" },
    
          [">"] = { escape = true, close = false, pair = "<>" },
          [")"] = { escape = true, close = false, pair = "()" },
          ["]"] = { escape = true, close = false, pair = "[]" },
          ["}"] = { escape = true, close = false, pair = "{}" },
    
          ['"'] = { escape = true, close = true, pair = '""' },
          ["'"] = { escape = true, close = true, pair = "''" },
          ["`"] = { escape = true, close = true, pair = "``" },
       },
       options = {
          disabled_filetypes = { "text" },
          disable_when_touch = false,
          touch_regex = "[%w(%[{]",
          pair_spaces = false,
          auto_indent = true,
          disable_command_mode = false,
       },
    }
<


AUTOCLOSE.NVIM VS OTHER PLUGINS ~

Some plugins such as `nvim-autopairs` and `ultimate-autopair.nvim` provide a
wider range of features such as fast wrap, treesitter pair checking, etc., but
some users may not need all of them. If you just want the basic functionality
of editing with pairs, you can use autoclose.nvim to achieve the same thing in
a simpler and faster way.


⭐ STAR HISTORY                             *autoclose.nvim-⭐-star-history*

<https://repohistory.com>

==============================================================================
1. Links                                                *autoclose.nvim-links*

1. *Star History Chart*: https://app.repohistory.com/api/svg?repo=m4xshen/autoclose.nvim&type=Date&theme=dark&transparent=false&color=FCE2C6

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
